sIc[i, j] <- aIc[i, j] + bIc[i, j]
}
}
## Brute Force testing (p,q) Combinations ##
p_vals <- 0:3
q_vals <- 0:7
aIc <- matrix(0, length(p_vals), length(q_vals))
bIc <- matrix(0, length(p_vals), length(q_vals))
sIc <- matrix(0, length(p_vals), length(q_vals))
#Calculating AIC and BIC for each different (p,q) combinations
for (i in c(1:length(p_vals))){
for (j in c(1:length(q_vals))){
tmp <- arima(data_mean.ts, order = c(as.numeric(p_vals[i]), 0,
as.numeric(q_vals[j])))
aIc[i, j] <- AIC(tmp)
bIc[i, j] <- BIC(tmp)
sIc[i, j] <- aIc[i, j] + bIc[i, j]
}
}
rm(j)
#Finding minimum value across combinations
mins = matrix(0, 3, 2)
mins[1, ] <- which(aIc == min(aIc), arr.ind = TRUE)
mins[2, ] <- which(bIc == min(bIc), arr.ind = TRUE)
mins[3, ] <- which(sIc == min(sIc), arr.ind = TRUE)
mins[3, ] <- which(sIc == min(sIc), arr.ind = TRUE)
{p_vals <- 0:3
q_vals <- 0:7
aIc <- matrix(0, length(p_vals), length(q_vals))
bIc <- matrix(0, length(p_vals), length(q_vals))
sIc <- matrix(0, length(p_vals), length(q_vals))
#Calculating AIC and BIC for each different (p,q) combinations
for (i in c(1:length(p_vals))){
for (j in c(1:length(q_vals))){
tmp <- arima(data_mean.ts, order = c(as.numeric(p_vals[i]), 0,
as.numeric(q_vals[j])))
aIc[i, j] <- AIC(tmp)
bIc[i, j] <- BIC(tmp)
sIc[i, j] <- aIc[i, j] + bIc[i, j]
}
}
rm(j)
#Finding minimum value across combinations
mins = matrix(0, 3, 2)
mins[1, ] <- which(aIc == min(aIc), arr.ind = TRUE)
mins[2, ] <- which(bIc == min(bIc), arr.ind = TRUE)
mins[3, ] <- which(sIc == min(sIc), arr.ind = TRUE)}
{p_vals <- 0:3
q_vals <- 0:2
aIc <- matrix(0, length(p_vals), length(q_vals))
bIc <- matrix(0, length(p_vals), length(q_vals))
sIc <- matrix(0, length(p_vals), length(q_vals))
#Calculating AIC and BIC for each different (p,q) combinations
for (i in c(1:length(p_vals))){
for (j in c(1:length(q_vals))){
tmp <- arima(data_mean.ts, order = c(as.numeric(p_vals[i]), 0,
as.numeric(q_vals[j])))
aIc[i, j] <- AIC(tmp)
bIc[i, j] <- BIC(tmp)
sIc[i, j] <- aIc[i, j] + bIc[i, j]
}
}
rm(j)
#Finding minimum value across combinations
mins = matrix(0, 3, 2)
mins[1, ] <- which(aIc == min(aIc), arr.ind = TRUE)
mins[2, ] <- which(bIc == min(bIc), arr.ind = TRUE)
mins[3, ] <- which(sIc == min(sIc), arr.ind = TRUE)}
View(aIc)
View(mins)
i=1
output <- paste0("The minimum pair of $(p,q)$ when minimizing the ", tmp[i],
" is $p$ = ", mins[i, 1] - 1, " and $q$ = ", mins[i, 2] - 1)
output
array(1000, dim = c(10,10,10))
array(1:1000, dim = c(10,10,10))
tmp <- array(1:1000, dim = c(10,10,10))
which(tmp == min(tmp))
which(tmp == min(tmp), arr.ind = TRUE)
## Preamble ##
wd <- paste0("C:/Users/dj-lu/OneDrive - University of Exeter/University of Exeter",
"/05 - Fifth Year/Statistical Modelling in Space and Time/Courseworks/Coursework",
" 2/RFiles")
setwd(wd)
sav_dir <- paste0(substr(wd, 1, 149), "Latex_Files/Statistical-Modelling-in-Space",
"-and-Time---CW2/Main/Sections/ARIMA")
set.seed(1337)
#Required Packages
require(ggplot2)
require(tibble)
##          ##
## Plotting ACF and PACF ##
png(paste0(sav_dir, "/Plots/ACF.png"), 600, 350)
plot(acf(data_mean.ts, lag.max = 40),
main = "ACF of Quarterly Means", xlab = "Lag (years)")
dev.off()
rm(ACF)
PACF <- pacf(data_mean.ts, lag.max = 40)
png(paste0(sav_dir, "/Plots/PACF.png"), 600, 350)
plot(PACF, main = "PACF of Quarterly Means", xlab = "Lag (years)")
rm(PACF)
dev.off()
##                       ##
## Brute Force testing (p,q) Combinations ##
p_vals <- 0:3
q_vals <- 0:7
aIc <- matrix(0, length(p_vals), length(q_vals))
bIc <- matrix(0, length(p_vals), length(q_vals))
sIc <- matrix(0, length(p_vals), length(q_vals))
#Calculating AIC and BIC for each different (p,q) combinations
for (i in c(1:length(p_vals))){
for (j in c(1:length(q_vals))){
tmp <- arima(data_mean.ts, order = c(as.numeric(p_vals[i]), 0,
as.numeric(q_vals[j])))
aIc[i, j] <- AIC(tmp)
bIc[i, j] <- BIC(tmp)
sIc[i, j] <- aIc[i, j] + bIc[i, j]
}
}
rm(j)
#Finding minimum value across combinations
mins = matrix(0, 3, 2)
mins[1, ] <- which(aIc == min(aIc), arr.ind = TRUE)
mins[2, ] <- which(bIc == min(bIc), arr.ind = TRUE)
mins[3, ] <- which(sIc == min(sIc), arr.ind = TRUE)
#Outputting minimum combinations
tmp <- c("AIC", "BIC", "Sum of AIC and BIC")
for (i in c(1:3)){
output <- paste0("The minimum pair of $(p,q)$ when minimizing the ", tmp[i],
" is $p$ = ", mins[i, 1] - 1, " and $q$ = ", mins[i, 2] - 1)
writeLines(paste0(sav_dir, "/Outputs/", "min", i, ".txt"))
}
output = aIc
colnames(output) <- 0:(length(q_vals) - 1)
rownames(output) <- 0:(length(p_vals) - 1)
rm(aIc, bIc, sIc, mins, tmp, p_vals, q_vals, i)
write.table(as.data.frame(round(output, 2)) %>% rownames_to_column('p/q'),
paste0(substr(sav_dir, 1, 212),"S2tab1.csv"), quote = F,
sep = ",", row.names = F)
rm(output)
##                                        ##
## Preamble ##
setwd("C:/Users/dj-lu/OneDrive - University of Exeter/University of Exeter/05 - Fifth Year/Statistical Modelling in Space and Time/Courseworks/Coursework 2/RFiles")
set.seed(1337)
#Required Packages
require(ggplot2)
require(car)
require(ggfortify)
require(zoo)
##          ##
## Validating Data ##
sav_dir <- paste0(wd, "Latex_Files/Statistical-Modelling-in-Space-and-Time---CW2",
"/Main/Sections/DataInegrity")
#Print summary of data
#write.table(summary(data), paste0(sav_dir,"/Outputs/summary.txt"), sep = "")
#Box-plot of data (Annual Quarters)
png(paste0(sav_dir, "/Plots/Box(yr).png"), 600, 350)
ggplot(data, aes(x = factor(Quarter), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Quarter") +
xlab("Quarter") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
#Box-plot of data (Months)
png(paste0(sav_dir, "/Plots/Box(mnth).png"), 600, 350)
ggplot(data, aes(x = factor(month), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Month") +
xlab("Month") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
#Extracting and plotting outliers
#m_out <- Boxplot(data$Overturning_Strength ~ data$month, data = data)
m_out <- data[as.numeric(Boxplot(data$Overturning_Strength ~ data$month, data = data)), ]
png(paste0(sav_dir, "/Plots/outliers.png"), 600, 350)
ggplot(m_out, aes(x = DateTime, y = Overturning_Strength)) +
geom_point(colour = "red") +
ggtitle("Monthly Overturning Strength Outliers Against Time") +
xlab("Time") +
ylab("Overturning Strength (Sv)")
dev.off()
rm(m_out)
##Plotting original data
png(paste0(sav_dir, "/Plots/orig.png"), 600, 350)
autoplot(data_mean.ts, main = "Overturning Strength Time Series",
xlab = "Time", ylab = "Overturning Strength (Sv)")
dev.off()
##                 ##
MKDIR
mkdir
rm(list = ls())
## Preamble ##
source("Preamble.R")
##          ##
## Reading Data ##
source("Read_data.R")
##              ##
## Validating Data ##
source("Validate.R")
##                 ##
## Building ARMA Model ##
source("ARMA.R")
##                     ##
substr(wd, 1, 149)
sav_dir <- paste0(substr(wd, 1, 149), "Latex_Files/Statistical-Modelling-in-Sp",
"ace-and-Time---CW2/Main/Sections/DataInegrity")
sav_dir
(paste0(sav_dir, "/Plots/outliers.png")
paste0(sav_dir, "/Plots/outliers.png")
paste0(sav_dir, "/Plots/outliers.png")
## Preamble ##
source("Preamble.R")
sav_dir <- paste0(substr(wd, 1, 149), "Latex_Files/Statistical-Modelling-in-Sp",
"ace-and-Time---CW2/Main/Sections/DataInegrity")
##          ##
## Validating Data ##
#Print summary of data
#write.table(summary(data), paste0(sav_dir,"/Outputs/summary.txt"), sep = "")
#Box-plot of data (Annual Quarters)
png(paste0(sav_dir, "/Plots/Box(yr).png"), 600, 350)
ggplot(data, aes(x = factor(Quarter), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Quarter") +
xlab("Quarter") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
#Box-plot of data (Months)
png(paste0(sav_dir, "/Plots/Box(mnth).png"), 600, 350)
ggplot(data, aes(x = factor(month), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Month") +
xlab("Month") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
#Extracting and plotting outliers
m_out <- Boxplot(data$Overturning_Strength ~ data$month, data = data)
png(paste0(sav_dir, "/Plots/outliers.png"), 600, 350)
ggplot(m_out, aes(x = DateTime, y = Overturning_Strength)) +
geom_point(colour = "red") +
ggtitle("Monthly Overturning Strength Outliers Against Time") +
xlab("Time") +
ylab("Overturning Strength (Sv)")
dev.off()
rm(m_out)
##Plotting original data
png(paste0(sav_dir, "/Plots/orig.png"), 600, 350)
autoplot(data_mean.ts, main = "Overturning Strength Time Series",
xlab = "Time", ylab = "Overturning Strength (Sv)")
dev.off()
##                 ##
## Preamble ##
source("Preamble.R")
##          ##
## Reading Data ##
#Importing data
data <- read.csv("Data/Overturning data.csv")
#Creating DateTime Column
data$DateTime <- as.POSIXct(with(data, paste(paste(year, month, day, sep = "-"),
paste(hour, 0, 0, sep = ":")),
"%Y-%m-%d %H:%M:%S"))
#Creating {year}-{Quarter} column
data$qy <- paste(data$year, data$Quarter, sep = "-")
#Creating time series from quarterly means
data_mean.ts <- ts(as.vector(tapply(data$Overturning_Strength, data$qy, mean)),
start = c(2004, 2), frequency = 4)
##              ##
## Preamble ##
source("Preamble.R")
sav_dir <- paste0(substr(wd, 1, 149), "Latex_Files/Statistical-Modelling-in-Sp",
"ace-and-Time---CW2/Main/Sections/DataInegrity")
##          ##
## Validating Data ##
#Print summary of data
#write.table(summary(data), paste0(sav_dir,"/Outputs/summary.txt"), sep = "")
#Box-plot of data (Annual Quarters)
png(paste0(sav_dir, "/Plots/Box(yr).png"), 600, 350)
ggplot(data, aes(x = factor(Quarter), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Quarter") +
xlab("Quarter") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
## Preamble ##
source("Preamble.R")
sav_dir <- paste0(substr(wd, 1, 149), "Latex_Files/Statistical-Modelling-in-Sp",
"ace-and-Time---CW2\Main\Sections\DataIntegretity")
##          ##
## Validating Data ##
#Print summary of data
#write.table(summary(data), paste0(sav_dir,"/Outputs/summary.txt"), sep = "")
#Box-plot of data (Annual Quarters)
png(paste0(sav_dir, "/Plots/Box(yr).png"), 600, 350)
ggplot(data, aes(x = factor(Quarter), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Quarter") +
xlab("Quarter") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
#Box-plot of data (Months)
png(paste0(sav_dir, "/Plots/Box(mnth).png"), 600, 350)
ggplot(data, aes(x = factor(month), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Month") +
xlab("Month") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
#Extracting and plotting outliers
m_out <- Boxplot(data$Overturning_Strength ~ data$month, data = data)
png(paste0(sav_dir, "/Plots/outliers.png"), 600, 350)
ggplot(m_out, aes(x = DateTime, y = Overturning_Strength)) +
geom_point(colour = "red") +
ggtitle("Monthly Overturning Strength Outliers Against Time") +
xlab("Time") +
ylab("Overturning Strength (Sv)")
dev.off()
rm(m_out)
##Plotting original data
png(paste0(sav_dir, "/Plots/orig.png"), 600, 350)
autoplot(data_mean.ts, main = "Overturning Strength Time Series",
xlab = "Time", ylab = "Overturning Strength (Sv)")
dev.off()
##                 ##
substr(wd, 1, 149)
## Preamble ##
source("Preamble.R")
##          ##
## Reading Data ##
#Importing data
data <- read.csv("Data/Overturning data.csv")
#Creating DateTime Column
data$DateTime <- as.POSIXct(with(data, paste(paste(year, month, day, sep = "-"),
paste(hour, 0, 0, sep = ":")),
"%Y-%m-%d %H:%M:%S"))
#Creating {year}-{Quarter} column
data$qy <- paste(data$year, data$Quarter, sep = "-")
#Creating time series from quarterly means
data_mean.ts <- ts(as.vector(tapply(data$Overturning_Strength, data$qy, mean)),
start = c(2004, 2), frequency = 4)
##              ##
## Preamble ##
source("Preamble.R")
##          ##
## Reading Data ##
#Importing data
data <- read.csv("Data/Overturning data.csv")
#Creating DateTime Column
data$DateTime <- as.POSIXct(with(data, paste(paste(year, month, day, sep = "-"),
paste(hour, 0, 0, sep = ":")),
"%Y-%m-%d %H:%M:%S"))
#Creating {year}-{Quarter} column
data$qy <- paste(data$year, data$Quarter, sep = "-")
#Creating time series from quarterly means
data_mean.ts <- ts(as.vector(tapply(data$Overturning_Strength, data$qy, mean)),
start = c(2004, 2), frequency = 4)
##              ##
## Preamble ##
source("Preamble.R")
sav_dir <- paste0(substr(wd, 1, 149), "Latex_Files/Statistical-Modelling-in-Sp",
"ace-and-Time---CW2/Main/Sections/DataIntegretity")
##          ##
## Validating Data ##
#Print summary of data
#write.table(summary(data), paste0(sav_dir,"/Outputs/summary.txt"), sep = "")
#Box-plot of data (Annual Quarters)
png(paste0(sav_dir, "/Plots/Box(yr).png"), 600, 350)
ggplot(data, aes(x = factor(Quarter), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Quarter") +
xlab("Quarter") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
#Box-plot of data (Months)
png(paste0(sav_dir, "/Plots/Box(mnth).png"), 600, 350)
ggplot(data, aes(x = factor(month), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Month") +
xlab("Month") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
#Extracting and plotting outliers
m_out <- Boxplot(data$Overturning_Strength ~ data$month, data = data)
png(paste0(sav_dir, "/Plots/outliers.png"), 600, 350)
ggplot(m_out, aes(x = DateTime, y = Overturning_Strength)) +
geom_point(colour = "red") +
ggtitle("Monthly Overturning Strength Outliers Against Time") +
xlab("Time") +
ylab("Overturning Strength (Sv)")
dev.off()
rm(m_out)
##Plotting original data
png(paste0(sav_dir, "/Plots/orig.png"), 600, 350)
autoplot(data_mean.ts, main = "Overturning Strength Time Series",
xlab = "Time", ylab = "Overturning Strength (Sv)")
dev.off()
##                 ##
## Preamble ##
source("Preamble.R")
sav_dir <- paste0(substr(wd, 1, 149), "Latex_Files/Statistical-Modelling-in-Sp",
"ace-and-Time---CW2/Main/Sections/ARIMA")
##          ##
## Plotting ACF and PACF ##
png(paste0(sav_dir, "/Plots/ACF.png"), 600, 350)
plot(acf(data_mean.ts, lag.max = 40),
main = "ACF of Quarterly Means", xlab = "Lag (years)")
dev.off()
png(paste0(sav_dir, "/Plots/PACF.png"), 600, 350)
plot(pacf(data_mean.ts, lag.max = 40),
main = "PACF of Quarterly Means", xlab = "Lag (years)")
dev.off()
##                       ##
## Brute Force testing (p,q) Combinations ##
p_vals <- 0:3
q_vals <- 0:7
aIc <- matrix(0, length(p_vals), length(q_vals))
bIc <- matrix(0, length(p_vals), length(q_vals))
sIc <- matrix(0, length(p_vals), length(q_vals))
#Calculating AIC and BIC for each different (p,q) combinations
for (i in c(1:length(p_vals))){
for (j in c(1:length(q_vals))){
tmp <- arima(data_mean.ts, order = c(as.numeric(p_vals[i]), 0,
as.numeric(q_vals[j])))
aIc[i, j] <- AIC(tmp)
bIc[i, j] <- BIC(tmp)
sIc[i, j] <- aIc[i, j] + bIc[i, j]
}
}
rm(j)
#Finding minimum value across combinations
mins = matrix(0, 3, 2)
mins[1, ] <- which(aIc == min(aIc), arr.ind = TRUE)
mins[2, ] <- which(bIc == min(bIc), arr.ind = TRUE)
mins[3, ] <- which(sIc == min(sIc), arr.ind = TRUE)
#Outputting minimum combinations
tmp <- c("AIC", "BIC", "Sum of AIC and BIC")
for (i in c(1:3)){
output <- paste0("The minimum pair of $(p,q)$ when minimizing the ", tmp[i],
" is $p$ = ", mins[i, 1] - 1, " and $q$ = ", mins[i, 2] - 1)
writeLines(paste0(sav_dir, "/Outputs/", "min", i, ".txt"))
}
output = sIc
colnames(output) <- 0:(length(q_vals) - 1)
rownames(output) <- 0:(length(p_vals) - 1)
rm(aIc, bIc, sIc, mins, tmp, p_vals, q_vals, i)
write.table(as.data.frame(round(output, 2)) %>% rownames_to_column('p/q'),
paste0(substr(sav_dir, 1, 212),"S2tab1.csv"), quote = F,
sep = ",", row.names = F)
rm(output)
##                                        ##
rm(list = ls())
## Preamble ##
source("Preamble.R")
##          ##
## Reading Data ##
source("Read_data.R")
##              ##
## Validating Data ##
source("Validate.R")
##                 ##
## Building ARMA Model ##
source("ARMA.R")
##                     ##
## Preamble ##
source("Preamble.R")
sav_dir <- paste0(substr(wd, 1, 149), "Latex_Files/Statistical-Modelling-in-Sp",
"ace-and-Time---CW2/Main/Sections/DataIntegretity")
##          ##
## Validating Data ##
#Print summary of data
#write.table(summary(data), paste0(sav_dir,"/Outputs/summary.txt"), sep = "")
#Box-plot of data (Annual Quarters)
png(paste0(sav_dir, "/Plots/Box(yr).png"), 600, 350)
ggplot(data, aes(x = factor(Quarter), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Quarter") +
xlab("Quarter") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
#Box-plot of data (Months)
png(paste0(sav_dir, "/Plots/Box(mnth).png"), 600, 350)
ggplot(data, aes(x = factor(month), y = Overturning_Strength)) +
geom_boxplot(outlier.colour = "red", outlier.size = 1, coef = 1.5) +
ggtitle("Box Plot for Overturning Stength For Each Annual Month") +
xlab("Month") + ylab("Overturning Stength (Sv)") +
stat_boxplot(geom = "errorbar", width = 0.3)
dev.off()
#Extracting and plotting outliers
m_out <- Boxplot(data$Overturning_Strength ~ data$month, data = data)
png(paste0(sav_dir, "/Plots/outliers.png"), 600, 350)
ggplot(m_out, aes(x = DateTime, y = Overturning_Strength)) +
geom_point(colour = "red") +
ggtitle("Monthly Overturning Strength Outliers Against Time") +
xlab("Time") +
ylab("Overturning Strength (Sv)")
dev.off()
rm(m_out)
##Plotting original data
png(paste0(sav_dir, "/Plots/orig.png"), 600, 350)
autoplot(data_mean.ts, main = "Overturning Strength Time Series",
xlab = "Time", ylab = "Overturning Strength (Sv)")
dev.off()
##                 ##
install.packages("forecast")
auto.arima(data_mean.ts)
library(forecast)
auto.arima(data_mean.ts)
auto.arima(data_mean.ts, trace = T)
190.57+198.89
auto.arima(data_mean.ts, trace = T, ic = "BIC")
auto.arima(data_mean.ts, trace = T, ic = "bic")
auto.arima(data_mean.ts, trace = T, ic = "aic")
auto.arima(data_mean.ts, trace = T, ic = "aaic")
auto.arima(data_mean.ts, trace = T, ic = "aicc")
